"use strict";(self.webpackChunkstencil=self.webpackChunkstencil||[]).push([[365],{5059:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return c},contentTitle:function(){return r},metadata:function(){return l},toc:function(){return d},default:function(){return m}});var i=a(7462),n=a(3366),s=(a(7294),a(3905)),o=["components"],c={},r="Concepts",l={unversionedId:"concepts",id:"concepts",isDocsHomePage:!1,title:"Concepts",description:"This section describes the core elements of a schema registry.",source:"@site/docs/concepts.md",sourceDirName:".",slug:"/concepts",permalink:"/stencil/docs/concepts",editUrl:"https://github.com/odpf/stencil/edit/master/docs/docs/concepts.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/stencil/docs/introduction"},next:{title:"Quick start guide",permalink:"/stencil/docs/guides/quick_start"}},d=[{value:"Namespace",id:"namespace",children:[]},{value:"Schema",id:"schema",children:[]},{value:"Version",id:"version",children:[]},{value:"Compatibility",id:"compatibility",children:[{value:"Backward",id:"backward",children:[]},{value:"Forward",id:"forward",children:[]},{value:"Full",id:"full",children:[]}]}],h={toc:d};function m(e){var t=e.components,a=(0,n.Z)(e,o);return(0,s.kt)("wrapper",(0,i.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"concepts"},"Concepts"),(0,s.kt)("p",null,"This section describes the core elements of a schema registry."),(0,s.kt)("h2",{id:"namespace"},"Namespace"),(0,s.kt)("p",null,"A named collection of schemas. Each namespace holds a logically related set of schemas, typically managed by a single entity, belonging to a particular application and/or having a shared access control management scope. Since a schema registry is often a resource with a scope greater than a single application and might even span multiple organizations, it is very useful to put a grouping construct around sets of schemas that are related either by ownership or by a shared subject matter context. A namespace has following attributes:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"ID:")," Identifies the schema group."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Format:")," Defines the schema format managed by this namespace. e..g Avro, Protobuf, JSON"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Compatibility")," Schema compatibility constraint type. e.g. Backward, Forward, Full")),(0,s.kt)("h2",{id:"schema"},"Schema"),(0,s.kt)("p",null,"A document describing the structure, names, and types of some structured data payload. Conceptually, a schema is a description of a data structure. Since data structures evolve over time, the schema describing them will also evolve over time. Therefore, a schema often has multiple versions."),(0,s.kt)("h2",{id:"version"},"Version"),(0,s.kt)("p",null,"A specific version of a schema document. Even though not prescribed in this specification, an implementation might choose to impose compatibility constraints on versions following the initial version of a schema."),(0,s.kt)("h2",{id:"compatibility"},"Compatibility"),(0,s.kt)("p",null,"A key Schema Registry feature is the ability to version schemas as they evolve. Compatibility policies are created at the namespace or schema level, and define evolution rules for each schema."),(0,s.kt)("p",null,"After a compatibility policy has been defined for a schema, any subsequent version updates must honor the schema\u2019s original compatibility, to allow for consistent schema evolution."),(0,s.kt)("p",null,"Compatibility of schemas can be configured with any of the below values:"),(0,s.kt)("h3",{id:"backward"},"Backward"),(0,s.kt)("p",null,"Indicates that new version of a schema would be compatible with earlier version of that schema."),(0,s.kt)("h3",{id:"forward"},"Forward"),(0,s.kt)("p",null,"Indicates that an existing schema is compatible with subsequent versions of the schema."),(0,s.kt)("h3",{id:"full"},"Full"),(0,s.kt)("p",null,"Indicates that a new version of the schema provides both backward and forward compatibilities."))}m.isMDXComponent=!0}}]);